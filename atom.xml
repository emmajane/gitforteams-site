<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Git for Teams]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2016-12-20T14:45:29+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Git for Teams Book Now Available]]></title>
            <link href="/blog/2015/09/19/book-available"/>
            <updated>2015-09-19T00:00:00+00:00</updated>
            <id>/blog/2015/09/19/book-available</id>
            <content type="html"><![CDATA[<p>For over a decade I've been teaching people how to use version control. My methods have changed over the years as I've learned (first hand) what is most effective for different types of learners, and under different conditions. I spent a year packing all of that thinking and learning into Git for Teams. This 350-page book is now available from O'Reilly, and better bookstores around the world.</p>

<p>The book is separated into three sections: planning your workflow; the commands you need to run to implement your workflow; and a quick-start guide to the three most popular code hosting systems (GitHub, Bitbucket, and GitLab).</p>

<p>Designed to be useful for teams of one or more, but with more direct applications for smaller teams, Git for Teams was written with you in mind. People working on larger teams will still find value in the book as large teams are typically made up of lots of small teams. The foreword, written by Mark Atwood (Director of Open Source at HP), provides reassurances that the workflows outlined in the book will be a useful jumping off point for teams of all sizes.</p>

<p>Early reviews of the book have been very positive:</p>

<blockquote>
<p>This book is incredible in that it encompasses both the technical and social information necessary to use version control effectively. It's so important to understand good team practices before adding technology to the equation, and the guidance this book provides can help establish deliberate practices where chaos might otherwise reign.</p>

<p>Instead of throwing you into the deep end of memorizing commands and terms, Git for Teams walks you through the "why" of version control and how to work within a team, so that you approach the technology with understanding. It's not a cut-and-dry git reference book (it's not meant to be), but the material is laid out such that it can actually be used as one (the table of contents is really, really thorough). The technical material is really helpful for the beginner/intermediate level, but the content on working within a team is absolutely helpful (and necessary) for everyone.</p>

<p>Most importantly, the book makes almost no assumptions about prior knowledge, which is critical for teams where version control might be completely new or not well understood. (Yes, those places do exist!) There are tons of helpful diagrams to go along with the workflows and models, and some of the less-commonly understood topics are even covered, such as rebasing. Overall, I'd recommend this book as required reading for anyone developing software.</p>

<div><a href="http://shop.oreilly.com/product/0636920034520.do?cmp=af-prog-books-videos-product_cj_auwidget674_0636920034520_4470479">Ben</a>, Pittsburgh, O'Reilly.com review</div>
</blockquote>

<blockquote>
<p>The product description for this book is very accurate: it is a book focused on team workflows in software development, and it uses Git as an enabling technology. It provides a thorough overview of a lot of team and workflow concepts that aren't always emphasized in school, but are very important in industry. The author's style is quite conversational, making it a quick and easy read. This book is probably best for someone who is new to version control. It provides a good introduction and walk-through of how to use Git, but is clearly not intended to be a Git reference book--it focuses on team workflows.</p>

<p>My team switched to Git about a year ago, and it's been working well as a technical solution, but we've been lacking in consistency between how team members operate. This book did a good job of laying out several viable Git workflows, and I hope to be able to take what I've learned here to formalize our workflow.</p>

<div><a href="http://www.amazon.com/Git-Teams-User-Centered-Efficient-Workflows/dp/1491911182/">Zach Jones</a>, Amazon.com review
</blockquote>

<p>I am interested in hearing what's missing from the book so that I can expand this site to include whatever resources you think are missing. If there is a topic you would like covered, please do <a href="/about">get in touch</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Representing Rebasing]]></title>
            <link href="/blog/2015/02/23/representing-rebasing"/>
            <updated>2015-02-23T00:00:00+00:00</updated>
            <id>/blog/2015/02/23/representing-rebasing</id>
            <content type="html"><![CDATA[<p>Some topics I play with for years. Turning them over, coming at them from different angles, in different formats, and presenting the information to different people. I enjoy finding better ways to help people through topics I've tackled myself. Last week I gave two presentations based on the book I'm writing: <a href="https://speakerdeck.com/emmajane/peer-code-reviews">Peer Code Reviews: Are they worth it?</a> and <a href="https://speakerdeck.com/emmajane/a-rebasing-workflow">A Rebasing Workflow</a>. These topics are ones I've been working on for years through college curriculum development, conference presentations, workshops, articles, and through on-the-job observation.</p>

<p>I've written a few articles on <a href="/resources/review-process.html">code</a> <a href="alistapart.com/article/running-code-reviews-with-confidence">review</a>, and I've also given a few presentations on effective critiques. It's something I've been exposed to and thought about my reaction to for literally decades.</p>

<p>Rebasing, however, isn't something I've written about nearly as much. I touched on it a little bit in <a href="/resources/evolution-social-coding.html">The Evolution of Social Coding</a>, but I think it deserves more attention. Sure, the merge conflicts which pop up during rebasing can be frustrating to deal with, but that's not really what makes rebasing hard. Rebasing is complicated, not because of the technical part, but because of the social implications of how much it can break teams apart and how much the information can be used to make people feel like an outsider.</p>

<p>Hopefully <a href="/books">Git for Teams</a> will help to reduce the mysteries around rebasing and make it easier for teams to choose the best workflow for their circumstances. Maybe it will include rebasing, maybe it won't. But hopefully I can help people make an informed decision that makes their day-to-day interactions with Git a little easier.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Published Elsewhere]]></title>
            <link href="/blog/2014/12/02/published-elsewhere"/>
            <updated>2014-12-02T00:00:00+00:00</updated>
            <id>/blog/2014/12/02/published-elsewhere</id>
            <content type="html"><![CDATA[<p>Although this site hasn't been getting a lot of attention in the last few months, I've been hard at work on various Git resources.</p>

<ul>
<li><a href="http://24ways.org/2014/dealing-with-emergencies-in-git/">Dealing with Emergencies in Git</a>: an fun article published on <a href="http://24ways.org">24Ways</a> looking at how to use <code>stash</code> to put your work on hold; and how to <code>cherry-pick</code> relevant commits from another branch.</li>
<li><a href="http://shop.oreilly.com/product/0636920034872.do">Collaborating with Git: Crafting Workflows at the Command Line</a>: my videos with O'Reilly Media are now available. These videos include over six hours of instruction on how to use Git at the command line.</li>
<li><a href="http://alistapart.com/article/running-code-reviews-with-confidence">Running Code Reviews with Confidence</a>: an article on integrating peer reviews into your workflow. Published on <a href="http://alistapart.com/">A List Apart</a>.</li>
</ul>

<p>I'm also a little over a third of the way through writing a book on using Git with teams. The title will be published by O'Reilly in 2015. You can <a href="http://gitforteams.com/books/">read a draft of the outline here</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Social Coding and the Evolution of Our Work Flow]]></title>
            <link href="/blog/2014/06/28/social-coding"/>
            <updated>2014-06-28T00:00:00+00:00</updated>
            <id>/blog/2014/06/28/social-coding</id>
            <content type="html"><![CDATA[<p>This resource talks about git's optimization for the patching work 
flow, but how "modern" work flows are optimized for the
forking/branching work flow.  The problem is that these more "social"
work flows often have a commit granularity that is not compatible 
with git's tools (e.g. bisect). As we shift away from the patching 
work flow we become more tied to the ticketing system for our code's 
history...and these ticketing systems are often proprietary, for-pay 
web-based SaaS platforms.</p>

<p>Towards the end it gets a little bit alarmist, but hopefully that's 
half the fun. G'wan and read <a href="/resources/evolution-social-coding.html">The Evolution of Social Coding
with Git</a> and let me
know what you think.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Thinking Out Loud About Commit Granularity]]></title>
            <link href="/blog/2014/06/17/commit-granularity"/>
            <updated>2014-06-17T00:00:00+00:00</updated>
            <id>/blog/2014/06/17/commit-granularity</id>
            <content type="html"><![CDATA[<p>It's a classic mistake for a teacher to walk you through the
process of how <em>they</em> arrived at an answer when teaching you how
to think about a problem. In my most recent resource on <a href="/resources/commit-granularity.html">commit
granularity</a>, I've done exactly 
this. Fortunately the ideas are still running around in my head, so 
I don't mind giving you this half-baked idea. Or rather, it's not 
half baked, but simply an idea given to you from my perspective, 
instead of being a resource that I've created <em>for you</em> with empathy 
for where you're coming from. The empathetic version of the resource 
is coming, but first I need to get all the things out of my head, so 
I can take a pause to see things from your perspective.</p>

<p>So if you'd like to follow my train of thought, you can <a href="/resources/commit-granularity.html">read my notes</a> on best practices for 
teams of one, teams of more than one, and the implications this has 
for commit granularity and branching when working with Git.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Peer Review Process]]></title>
            <link href="/blog/2014/06/15/peer-review"/>
            <updated>2014-06-15T00:00:00+00:00</updated>
            <id>/blog/2014/06/15/peer-review</id>
            <content type="html"><![CDATA[<p>While working on a resources page for commit best practices, I
ended up in <a href="https://twitter.com/emmajanehw/status/478280621018865664">an interesting
conversation</a> with <a href="https://twitter.com/alignedleft">Scott Murray</a> and <a href="https://twitter.com/skamille">Camille Fournier</a> on the review process. Scott asked the question, "How can I ensure a contribution is good before I click 'merge'?"</p>

<p>What a great question! How subjective! How arbitrary! How do we
define "good"!</p>

<p>I took the time to combine a few of the resources I've worked
on in the last year into a single resource page,
<a href="/resources/review-process.html">The Review Process</a>. Right now
the document builds on the documentation that I worked on with
Joe Shindelar last year when I was the Project Manager at
<a href="http://drupalize.me">Drupalize.Me</a>. (New to PMing? You might
also be interested in reading <a href="http://drupalize.me/blog/201312/things-i-learned-managing-my-first-project">Things I Learned From Managing
My First
Project</a>.) It adds some resources on dealing with additional remotes (relevant if you're using a forking permission structure, as is common for open source projects as commonly seen on GitHub), and it also adds some tips on being a good reviewer (cribbed from an <a href="http://programming.oreilly.com/2013/07/six-ways-to-make-your-peer-code-reviews-more-effective.html">article on code review</a> I wrote last year for O'Reilly).</p>

<p>The resource is far from done, especially considering it only
covers one of the four models for review outlined at the
beginning of the document; however, if you're looking for a
starting place to begin <a href="/resources/review-process.html">incorporating peer reviews into your
own workflow</a>, I think there are
some valuable tips waiting for you in this new resource.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Updated Resources]]></title>
            <link href="/blog/2014/06/14/updated-resources"/>
            <updated>2014-06-14T00:00:00+00:00</updated>
            <id>/blog/2014/06/14/updated-resources</id>
            <content type="html"><![CDATA[<p>As I prepare for the OSCON workshop, <a href="http://www.oscon.com/oscon2014/user/proposal/status/34208">Git for Teams of One or
More</a>, I've been collecting resources over on <a href="https://bitly.com/bundles/o_5qda61i6ae/2">bit.ly</a>. Unfortunately bit.ly doesn't seem to have a way to organize a bundle of links into categories. The <a href="/resources/offsite.html">resources I added</a> more-or-less fall into the following categories:</p>

<ul>
<li>Mega learning resources</li>
<li>Cheat sheets and quick references</li>
<li>Workflow - 10,000ft view</li>
<li>Workflow - applied</li>
<li>Merge vs. Rebase Workflow</li>
<li>Team Governance</li>
<li>Commit Messsages - standards and granularity</li>
<li>Visualizing Git</li>
</ul>

<p>Although this is a topic I've been teaching for years, I still
take the time to re-evaluate the structure of the material each
time I teach the topic. The most recent iteration worked well
for managers, but it lacked some of the hands-on examples which
developers might have benefited from (the one-hour session
didn't give room for both).</p>

<p>As I continue to read how others have presented the
information, I continue to see the strengths (and weaknesses)
of how we teach workflow and source control. Two of the
articles on the size of a commit were especially interesting in
thinking about source control from the perspective of "teams of
one or more". The first article outlines the importance of a
<a href="https://sandofsky.com/blog/git-workflow.html">clean history which is easy to inspect and
analyze</a>. The
second article talks about some of the tools that are used,
such as git bisect, when <a href="https://www.lullabot.com/blog/article/git-best-practices-workflow-guidelines">identifying where a problem was introduced</a>.</p>

<p>I think this distinction is interesting because (again, my opinion here) a very tiny team is more likely to identify a bug and move forward to fix
the bug; but a larger team, with more senior developers, is more likely to investigate how /
why a regression was introduced. (Have I mentioned this is purely
speculation on my part?) Is this also the difference between a
project which is using tests / <a href="http://en.wikipedia.org/wiki/Test-driven_development">test driven
development</a> vs. one that is not ("test later" / cowboy coding)? Or perhaps the difference between a team which is motiviated by Lean best practices and is motivated to uncover and fix the root problem by <a href="http://www.isixsigma.com/tools-templates/cause-effect/determine-root-cause-5-whys/">asking the question why</a>.</p>

<p>And so, at the end of all of my reading and thinking today, I'm
leaving myself with the question: how do we balance between
ease-of-use now and tools to help future me debug a project?
It sort of reminds me of a comment made in a devops
presentation: if you aren't going to use the logs to improve
your efficiencies, why are you bothering to track the
information in the first place. Indeed, it's a delicate balance
and one where the solution becomes more obvious with experience.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[A Brief History]]></title>
            <link href="/blog/2014/05/16/a-brief-history"/>
            <updated>2014-05-16T00:00:00+00:00</updated>
            <id>/blog/2014/05/16/a-brief-history</id>
            <content type="html"><![CDATA[<p>This web site is designed to support learners who wish to use
version control in a more efficient manner. The original
version of the site was created for an online workshop that I
taught. Subsequently, it has become a holding place for
resources relating to the in-person workshops that I've taught
(and perhaps will teach for you!).</p>

<p>Looking back on my CV, I realize I've been teaching version
control for nearly a decade. I've used a few different systems
including CVS, subversion, Bazaar, and Git. I'm quite happy to
admit that although Bazaar was my favourite, I now use the
industry standard, Git. When learning Git, I found it to be
quite arrogant as a piece of software. It seemed to make a lot
of assumptions about what I already knew about version control.</p>

<p>My frustration with the software led to a series of conference
presentations (and a few articles) entitled, "Git Makes Me
Angry Inside". It turns out a fair number of people shared my
frustration. Regardless of any complaints I may have about Git,
I would much definitely be using it, than be forced to have no
version control at all.</p>

<p>Hopefully the project will peak your interest enough to pass
the word along to others who might be in need of a helping hand
when it comes to working efficiently with version control.</p>
]]></content>
        </entry>
    </feed>